00 Types of DI Service Lifetimes
• Different Types of Dependency Injection Service Lifetimes
    -> Transient 
        - the simplest
        - the safest
        - whenever you want to use an object, you create it; you don't have to reuse an existing object i.e., any time a service is requested, a new implementation is created
        :: New Service - every time  requested

    -> scoped
        - depends on the http request
        - a lifetime created every time a http request is made to the server
        - e.g if a page load is calling a service ten times, it will only create the object once to be reused ten times for that request. When a new request is made a new object is created
        :: New Service - once per request

    -> signgleton
        - implementation is created for the lifetime of the app
        :: New Service - once per application lifetime

*^ Scoped most recommended for web applications


01 Create Project
• Creating project
    -> Visual Studio >> Create Project
    -> Template :: ASP.NET Core Web App (Model-View-Controller)
    -> Select Project Dir >> Project Name [DI_Service_Lifetime] >> Solution Name [DI_Service_Lifetime]
        :: Leave 'Place solution and project in same directory' unchecked
    -> Framework :: .NET 6.0 (Long Term Support)

01 Create Service
• Creating project
    -> Right Click `DI_Service_Lifetime` >> Add Folder >> ;Services'

    -> Add interfaces [Add item > interface]
        - IScopedGuidService
        - ISingletonGuidService
        - ITransientGuidService

    -> Add implementation [Add item > class]
        - ScopedGuidService
        - SingletonGuidService
        - TransientGuidService

**Notes Noted**
• At first request:
    -> Transient Guids (1 & 2)  -   Differ
    -> Scoped Guids (1 & 2)     -   Same
    -> Singleton Guids (1 & 2)  -   Same

    
• At second request:
    -> Transient Guids (1 & 2)  -   New Sets    -   Differ
    -> Scoped Guids (1 & 2)     -   New Sets    -   Same
    -> Singleton Guids (1 & 2)  -   Same Sets
